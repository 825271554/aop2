<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--注册bean-->
    <bean id="userService" class="com.kuang.service.UserServierImpl"/>
    <bean id="Log" class="com.kuang.log.Log"/>
    <bean id="afterLog" class="com.kuang.log.AfterLog"/>

<!--  配置aop 需要导入约束-->
        <aop:config>
            <!--需要切入点   expression:表达式匹配要执行的方法  * com.kuang.service.UserServiceImpl.*(..))-->
            <aop:pointcut id="pointcut" expression="execution(* com.kuang.service.UserServierImpl.*(..))"/>

            <!--执行环绕; advice-ref执行方法 . pointcut-ref切入点-->
            <aop:advisor advice-ref="Log" pointcut-ref="pointcut"/>
            <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>
        </aop:config>

    <!--第二种方式自定义实现-->
    <!--注册bean-->
    <bean id="diy" class="com.kuang.diy.DiyPointcut "/>
    <!--aop的配置-->
    <aop:config>
        <!--第二种方式：使用AOP的标签实现-->
        <aop:aspect ref="diy">
            <aop:pointcut id="diyPonitcut" expression="execution(* com.kuang.service.UserServiceImpl.*(..))"/>
            <aop:before pointcut-ref="diyPonitcut" method="before"/>
            <aop:after pointcut-ref="diyPonitcut" method="after"/>

        </aop:aspect>
    </aop:config>


    <!--方式三注解 -->
    <bean id="zhujie" class="com.kuang.diy.zhujie"/>
    <!--驱动支持  jdk(默认)（="false"）  加poxy-target-class="true"/>时是CGLib动态代理-->

    <aop:aspectj-autoproxy/>
</beans>